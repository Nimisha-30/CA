# -*- coding: utf-8 -*-
"""PS5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zpLj7nVBas-3eCJiHvhhDu7_Rh16L4ak
"""

!pip install yfinance

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

nifty50Tickers = ['RELIANCE.NS', 'HDFCBANK.NS', 'ICICIBANK.NS', 'INFY.NS', 'TCS.NS', 'SHRIRAMFIN.NS', 'ITC.NS', 'KOTAKBANK.NS', 'AXISBANK.NS', 'SBIN.NS', 'LT.NS', 'BAJFINANCE.NS', 'MARUTI.NS', 'BHARTIARTL.NS', 'HINDUNILVR.NS', 'M&M.NS', 'ASIANPAINT.NS', 'TITAN.NS', 'ULTRACEMCO.NS', 'SUNPHARMA.NS', 'TECHM.NS', 'HCLTECH.NS', 'WIPRO.NS', 'NESTLEIND.NS', 'BAJAJFINSV.NS', 'POWERGRID.NS', 'NTPC.NS', 'TATAMOTORS.NS', 'ONGC.NS', 'TATASTEEL.NS', 'JSWSTEEL.NS', 'COALINDIA.NS', 'ADANIPORTS.NS', 'HINDALCO.NS', 'BPCL.NS', 'CIPLA.NS', 'DRREDDY.NS', 'EICHERMOT.NS', 'GRASIM.NS', 'DIVISLAB.NS', 'BRITANNIA.NS', 'UPL.NS', 'HEROMOTOCO.NS', 'SHREECEM.NS', 'INDUSINDBK.NS', 'SBILIFE.NS', 'BAJAJ-AUTO.NS', 'HDFCLIFE.NS', 'ICICIGI.NS', 'APOLLOHOSP.NS']
data = pd.DataFrame()

for ticker in nifty50Tickers:
    tickerData = yf.download(ticker, start = '2014-01-01', end = '2023-12-31', progress = False)
    data[ticker] = tickerData['Close']

data.plot(figsize = (20, 12), linewidth = 0.7)
plt.yscale('log')
plt.title('Log Close Prices of Nifty 50 Stocks(2014 - 2023)')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend(loc = 'center left', fontsize = 'x-small', bbox_to_anchor = (1, 0.5))
plt.show()

plt.figure(figsize = (20, 20))
correlationMatrix = data.corr()
sns.heatmap(correlationMatrix, annot = False, linewidths = 0.5, linecolor = 'black')
plt.show()

import numpy as np
from sklearn.decomposition import PCA
from sklearn.metrics import mean_squared_error

distanceMatrix = 1 - correlationMatrix ** 2
distanceMatrix = distanceMatrix.to_numpy()

pca30 = PCA(n_components = 30)
pca30.fit(distanceMatrix)
eValues30 = pca30.explained_variance_
eVectors30 = pca30.components_
transformed30 = pca30.transform(distanceMatrix)
reconstructed30 = pca30.inverse_transform(transformed30)

pca35 = PCA(n_components = 35)
pca35.fit(distanceMatrix)
eValues35 = pca35.explained_variance_
eVectors35 = pca35.components_
transformed35 = pca35.transform(distanceMatrix)
reconstructed35 = pca35.inverse_transform(transformed35)

pca40 = PCA(n_components = 40)
pca40.fit(distanceMatrix)
eValues40 = pca40.explained_variance_
eVectors40 = pca40.components_
transformed40 = pca40.transform(distanceMatrix)
reconstructed40 = pca40.inverse_transform(transformed40)

mse30 = mean_squared_error(distanceMatrix, reconstructed30)
mse35 = mean_squared_error(distanceMatrix, reconstructed35)
mse40 = mean_squared_error(distanceMatrix, reconstructed40)

print("Reconstruction Error (30 Components): {:.10f}".format(mse30))
print("Reconstruction Error (35 Components): {:.10f}".format(mse35))
print("Reconstruction Error (40 Components): {:.10f}".format(mse40))

import networkx as nx

G = nx.from_numpy_array(distanceMatrix)
T = nx.minimum_spanning_tree(G)
nodeLabels = {i: ticker for i, ticker in enumerate(nifty50Tickers)}

plt.figure(figsize = (15, 15))
nx.draw(T, with_labels = True, font_size = 5, labels = nodeLabels, node_size = 2000, pos = nx.circular_layout(T))
plt.title('Minimum Spanning Tree of Nifty50 Stocks')
plt.show()

from scipy.spatial.distance import cdist

corrDistMatrix = 1 - correlationMatrix
corrDistMatrix = corrDistMatrix.to_numpy()
corrG = nx.from_numpy_array(corrDistMatrix)
corrPrim = nx.minimum_spanning_tree(corrG, algorithm = 'prim')
corrKrus = nx.minimum_spanning_tree(corrG, algorithm = 'kruskal')

dailyReturns = data.pct_change().dropna()
euclideanMatrix = cdist(dailyReturns.T, dailyReturns.T, metric = 'euclidean')
eucG = nx.from_numpy_array(euclideanMatrix)
eucPrim = nx.minimum_spanning_tree(eucG, algorithm = 'prim')
eucKrus = nx.minimum_spanning_tree(eucG, algorithm = 'kruskal')

fig, axes = plt.subplots(2, 2, figsize = (10, 10))

nx.draw(corrPrim, with_labels = True, font_size = 2, labels = nodeLabels, node_size = 250, pos = nx.circular_layout(corrPrim), ax = axes[0, 0])
axes[0, 0].set_title('Correlation Distance - Prim')
nx.draw(corrKrus, with_labels = True, font_size = 2, labels = nodeLabels, node_size = 250, pos = nx.circular_layout(corrKrus), ax = axes[0, 1])
axes[0, 1].set_title('Correlation Distance - Kruskal')
nx.draw(eucPrim, with_labels = True, font_size = 2, labels = nodeLabels, node_size = 250, pos = nx.circular_layout(eucPrim), ax = axes[1, 0])
axes[1, 0].set_title('Euclidean Distance - Prim')
nx.draw(eucKrus, with_labels = True, font_size = 2, labels = nodeLabels, node_size = 250, pos = nx.circular_layout(eucKrus), ax = axes[1, 1])
axes[1, 1].set_title('Euclidean Distance - Kruskal')

plt.tight_layout()
plt.show()

from scipy.cluster.hierarchy import dendrogram, linkage

linked = linkage(distanceMatrix, 'single')

plt.figure(figsize = (10, 7))
dendrogram(linked,
           orientation = 'top',
           distance_sort = 'descending',
           show_leaf_counts = True,
           labels = nifty50Tickers)
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('Stock')
plt.ylabel('Distance')
plt.axhline(y = 0.5, color = 'r', linestyle = '--')
plt.show()