# -*- coding: utf-8 -*-
"""PS4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aK64IzCn4sO7y0Fo4Up7Et2iHpos6D-8
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Problem 1"""

# Load the datasets
import pandas as pd
table_b1 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS4/tableB1.csv')
table_b2 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS4/tableB2.csv')
table_b3 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS4/tableB3.csv')

table_b1.head(), table_b2.head(), table_b3.head()

data_b1 = table_b1.iloc[:, 1]
data_b2 = table_b2.iloc[:, 1]
data_b3 = table_b3.iloc[:, 1]

# Function to plot ACF and PACF
import matplotlib.pyplot as plt
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
def plot_acf_pacf(data, lags, title):
    fig, ax = plt.subplots(2, 1, figsize=(10, 8))
    plot_acf(data, lags=lags, ax=ax[0])
    plot_pacf(data, lags=lags, ax=ax[1])
    plt.suptitle(title)
    plt.show()

# Plot ACF and PACF for the given time lags
lags = [10, 12, 20]
for lag in lags:
    print("LAG VALUE =", lag)
    print()
    plot_acf_pacf(data_b1, lag, 'Table B1 ACF and PACF with lag')
    print()
    plot_acf_pacf(data_b2, lag, 'Table B2 ACF and PACF with lag')
    print()
    plot_acf_pacf(data_b3, lag, 'Table B3 ACF and PACF with lag')
    print()

# Calculate the order of stationarity for the time series
import statsmodels.api as sm
def test_stationarity(data):
    result = sm.tsa.adfuller(data)
    return result[1]  # Return the p-value

stationarity_results = {
    "Table B1 (Rate)": test_stationarity(table_b1["Rate"]),
    "Table B2 (Sales)": test_stationarity(table_b2["Sales"]),
    "Table B3 (Reading)": test_stationarity(table_b3["Reading"])
}

stationarity_results

"""# Problem 2"""

# Define ARMA orders to be fitted
orders = [(p, q) for p in range(10, 21, 2) for q in range(10, 21, 2)]
print(orders)

# Function to fit ARMA model and return results
from statsmodels.tsa.arima.model import ARIMA
def fit_arma(data, order):
    model = ARIMA(data, order=order)
    model_fit = model.fit()
    return model_fit

orders = [(10, 0, 10), (10, 0, 12), (10, 0, 20), (12, 0, 10), (12, 0, 12), (12, 0, 20), (20, 0, 10), (20, 0, 12), (20, 0, 20)]

results_b1 = [fit_arma(table_b1["Rate"], order) for order in orders]
results_b2 = [fit_arma(table_b2["Sales"], order) for order in orders]
results_b3 = [fit_arma(table_b3["Reading"], order) for order in orders]

# Perform ANOVA comparison for all models in each table
def compare_models(models):
    aic_values = [model.aic for model in models]
    return aic_values

anova_b1 = compare_models(results_b1)
anova_b2 = compare_models(results_b2)
anova_b3 = compare_models(results_b3)

# Print AIC comparison results (lower AIC is better)
print("AIC results for Table B1 (Rate):")
print(anova_b1)

print("\nAIC results for Table B2 (Sales):")
print(anova_b2)

print("\nAIC results for Table B3 (Reading):")
print(anova_b3)

# Collect the residuals from each model
residuals_b1 = [result.resid for result in results_b1]
residuals_b2 = [result.resid for result in results_b2]
residuals_b3 = [result.resid for result in results_b3]

# Perform ANOVA on the residuals for Table B1
anova_data_b1 = pd.DataFrame({
    "Model1": residuals_b1[0],
    "Model2": residuals_b1[1],
    "Model3": residuals_b1[2],
    "Model4": residuals_b1[3],
    "Model5": residuals_b1[4],
    "Model6": residuals_b1[5],
    "Model7": residuals_b1[6],
    "Model8": residuals_b1[7],
    "Model9": residuals_b1[8]
})

from statsmodels.stats.anova import anova_lm
anova_b1 = sm.stats.anova_lm(sm.OLS(anova_data_b1["Model1"], anova_data_b1).fit(),
                             sm.OLS(anova_data_b1["Model2"], anova_data_b1).fit(),
                             sm.OLS(anova_data_b1["Model3"], anova_data_b1).fit(),
                             sm.OLS(anova_data_b1["Model4"], anova_data_b1).fit(),
                             sm.OLS(anova_data_b1["Model5"], anova_data_b1).fit(),
                             sm.OLS(anova_data_b1["Model6"], anova_data_b1).fit(),
                             sm.OLS(anova_data_b1["Model7"], anova_data_b1).fit(),
                             sm.OLS(anova_data_b1["Model8"], anova_data_b1).fit(),
                             sm.OLS(anova_data_b1["Model9"], anova_data_b1).fit())

# Print ANOVA results
print("ANOVA results for Table B1 (Rate):")
print(anova_b1)

# Perform ANOVA on the residuals for Table B1
anova_data_b2 = pd.DataFrame({
    "Model1": residuals_b2[0],
    "Model2": residuals_b2[1],
    "Model3": residuals_b2[2],
    "Model4": residuals_b2[3],
    "Model5": residuals_b2[4],
    "Model6": residuals_b2[5],
    "Model7": residuals_b2[6],
    "Model8": residuals_b2[7],
    "Model9": residuals_b2[8]
})

anova_b2 = sm.stats.anova_lm(sm.OLS(anova_data_b2["Model1"], anova_data_b2).fit(),
                             sm.OLS(anova_data_b2["Model2"], anova_data_b2).fit(),
                             sm.OLS(anova_data_b2["Model3"], anova_data_b2).fit(),
                             sm.OLS(anova_data_b2["Model4"], anova_data_b2).fit(),
                             sm.OLS(anova_data_b2["Model5"], anova_data_b2).fit(),
                             sm.OLS(anova_data_b2["Model6"], anova_data_b2).fit(),
                             sm.OLS(anova_data_b2["Model7"], anova_data_b2).fit(),
                             sm.OLS(anova_data_b2["Model8"], anova_data_b2).fit(),
                             sm.OLS(anova_data_b2["Model9"], anova_data_b2).fit())

print("ANOVA results for Table B2 (Sales):")
print(anova_b2)

# Perform ANOVA on the residuals for Table B1
anova_data_b3 = pd.DataFrame({
    "Model1": residuals_b3[0],
    "Model2": residuals_b3[1],
    "Model3": residuals_b3[2],
    "Model4": residuals_b3[3],
    "Model5": residuals_b3[4],
    "Model6": residuals_b3[5],
    "Model7": residuals_b3[6],
    "Model8": residuals_b3[7],
    "Model9": residuals_b3[8]
})

anova_b3 = sm.stats.anova_lm(sm.OLS(anova_data_b3["Model1"], anova_data_b3).fit(),
                             sm.OLS(anova_data_b3["Model2"], anova_data_b3).fit(),
                             sm.OLS(anova_data_b3["Model3"], anova_data_b3).fit(),
                             sm.OLS(anova_data_b3["Model4"], anova_data_b3).fit(),
                             sm.OLS(anova_data_b3["Model5"], anova_data_b3).fit(),
                             sm.OLS(anova_data_b3["Model6"], anova_data_b3).fit(),
                             sm.OLS(anova_data_b3["Model7"], anova_data_b3).fit(),
                             sm.OLS(anova_data_b3["Model8"], anova_data_b3).fit(),
                             sm.OLS(anova_data_b3["Model9"], anova_data_b3).fit())

print("ANOVA results for Table B3 (Reading):")
print(anova_b3)

"""# Problem 3"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA

# Parameters
n = 50000  # Number of observations
k = 24  # Max lag for ACF/PACF

# Time series model (i)
def generate_series_1(n, y0):
    np.random.seed(0)
    y = np.zeros(n)
    y[0] = y0
    errors = np.random.normal(0, 10, n)
    for t in range(1, n):
        y[t] = 10 + 0.75 * y[t - 1] + errors[t]
    return y

# Time series model (ii)
def generate_series_2(n, y0):
    np.random.seed(1)
    y = np.zeros(n)
    y[0] = y0
    errors = np.random.normal(0, 4, n)
    for t in range(1, n):
        y[t] = 2 + 0.75 * y[t - 1] + errors[t]
    return y

# Time series model (iii)
def generate_series_3(n, y0):
    np.random.seed(2)
    y = np.zeros(n)
    y[0] = y0
    errors = np.random.normal(0, 20, n)
    for t in range(1, n):
        y[t] = 20 + y[t - 1] + errors[t]
    return y

# Generate time series
y1 = generate_series_1(n, 31)
y2 = generate_series_2(n, 42)
y3 = generate_series_3(n, 30)

# Plot ACF and PACF for each series
def plot_acf_pacf(series, title):
    plt.figure(figsize=(12, 6))
    plt.subplot(121)
    plot_acf(series, lags=k, ax=plt.gca())
    plt.title(f"ACF: {title}")
    plt.subplot(122)
    plot_pacf(series, lags=k, ax=plt.gca())
    plt.title(f"PACF: {title}")
    plt.tight_layout()
    plt.show()

plot_acf_pacf(y1, "Series 1: yt=10+0.75yt-1+t (N(0,10))")
plot_acf_pacf(y2, "Series 2: yt=2+0.75yt-1+t (N(0,4))")
plot_acf_pacf(y3, "Series 3: yt=20+yt-1+t (N(0,20))")

# Fit ARMA models (ARIMA with d=0)
def fit_arma_model(series, order):
    model = ARIMA(series, order=(order[0], 0, order[1]))
    model_fit = model.fit()
    print(model_fit.summary())
    return model_fit

# Fit ARMA models for each series
print("Fitting ARMA models for Series 1:")
for order in orders:
    fit_arma_model(y1, order)

print("\nFitting ARMA models for Series 2:")
for order in orders:
    fit_arma_model(y2, order)

print("\nFitting ARMA models for Series 3:")
for order in orders:
    fit_arma_model(y3, order)