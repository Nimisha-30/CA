# -*- coding: utf-8 -*-
"""PS7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RRPdtOvWHi2BNYI91q-s4SLcea0BRjEU

1. Collect historical price data for at least 10 different assets over the past 5 years.
2. Calculate the daily returns for each asset.
3. Calculate the expected returns, variances, and covariance of the assets.
4. Construct the efficient frontier. Plot the efficient frontier and identify the minimum variance portfolio and the maximum Sharpe ratio portfolio.
5. Discuss the trade-offs between risk and return based on the efficient frontier. (Theory)
6. Calculate the beta for each asset using a market index (e.g., S&P 500) as the benchmark.
7. Estimate the expected returns of the assets.-? (same as in 3)
8. Compare the expected returns with the historical average returns.
9. Calculate the Value at Risk (VaR) for the optimized portfolio. Use both historical simulation and parametric methods.
10. Assess the impact of different confidence levels on VaR. (Theory)
11. Discuss how VaR can be used as a tool for portfolio risk management. (Theory)
12. Backtest the performance of the optimized portfolios over the last year of data.
13. Compare the performance of the Mean-Variance, optimized portfolios against a simple equally-weighted portfolio.
"""

from google.colab import drive

drive.mount('/content/drive')

"""1. Collect historical price data for at least 10 different assets over the past 5 years."""

import pandas as pd

df0 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS6/AUTOMOBILE/BAJAJ AUTO.csv')
df1 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS6/AUTOMOBILE/MAHINDRA.csv')
df2 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS6/AUTOMOBILE/MARUTI SUZUKI.csv')
df3 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS6/AUTOMOBILE/TATA MOTORS.csv')
df4 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS6/AUTOMOBILE/TVS MOTORS.csv')
df5 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS6/BANK/AXIS.csv')
df6 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS6/BANK/HDFC.csv')
df7 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS6/BANK/ICICI.csv')
df8 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS6/BANK/KOTAK MAHINDRA.csv')
df9 = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/PS6/BANK/SBI.csv')

df = [df0, df1, df2, df3, df4, df5, df6, df7, df8, df9]
stocks = ['BAJAJ AUTO', 'MAHINDRA', 'MARUTI SUZUKI', 'TATA MOTORS', 'TVS MOTORS', 'AXIS', 'HDFC', 'ICICI', 'KOTAK MAHINDRA', 'SBI']

"""3. Calculate the expected returns, variances, and covariance of the assets."""

import numpy as np

for i in range(len(df)):
    df[i]['Rate of Return']=((df[i]['Close Price']-df[i]['Open Price'])/df[i]['Open Price'])
mu=np.array([df[i]['Rate of Return'].mean() for i in range(len(df))])
sigma=np.array([df[i]['Rate of Return'].var() for i in range(len(df))])

print("Expected Return and Risk of each company:\n")
for i in range(len(df)):
    print(stocks[i])
    print("Expected Return:", mu[i])
    print("Risk:", sigma[i])
    print()

rho=[]
covariancematrix=[]
for i in range(len(df)):
    row=[]
    covrow=[]
    for j in range(len(df)):
        r=np.corrcoef(df[i]['Rate of Return'], df[j]['Rate of Return'])[0][1]
        cov=r*sigma[i]*sigma[j]
        row.append(r)
        covrow.append(cov)
    rho.append(row)
    covariancematrix.append(covrow)
rho=np.array(rho)
covariancematrix=np.array(covariancematrix)
print("Correlation Coefficient Matrix:\n", rho)
print()
print("Covariance Matrix:\n", covariancematrix)

"""4. Construct the efficient frontier. Plot the efficient frontier and identify the minimum variance portfolio and the maximum Sharpe ratio portfolio."""

# Efficient Frontier Optimization
def portfolio_performance(weights, expected_return, covariance_matrix):
    returns=np.dot(expected_return, weights.T)
    risk=np.dot(weights, np.dot(covariance_matrix, weights.T))
    return returns, risk
"""
def minimize_risk(weights, expected_return, covariance_matrix):
    return portfolio_performance(weights, expected_return, covariance_matrix)[1]
"""
def efficient_frontier(expected_return, covariance_matrix, risk_free_rate, num_portfolios=1000):
    num_assets=len(expected_return)
    results=np.zeros((3, num_portfolios))
    weights_record=[]
    for i in range(num_portfolios):
        weights=np.random.random(num_assets)
        weights/=np.sum(weights)
        weights_record.append(weights)
        portfolio_return, portfolio_risk=portfolio_performance(weights, expected_return, covariance_matrix)
        results[0, i]=portfolio_return
        results[1, i]=portfolio_risk
        results[2, i]=(portfolio_return-risk_free_rate)/portfolio_risk # Sharpe Ratio
    return results, weights_record

# Assume risk free rate = 6%
r=0.06

# Generate efficient frontier
results, weights=efficient_frontier(mu, covariancematrix, r)

import matplotlib.pyplot as plt

# Plot efficient frontier
plt.scatter(results[1, :], results[0, :], c=results[2, :], cmap='cool')
plt.colorbar(label='Sharpe Ratio')
plt.xlabel('Risk')
plt.ylabel('Return')
plt.title('Efficient Frontier')
plt.show()

# Minimum Variance Portfolio
def constraintweights(weights):
    return np.sum(weights)-1.0

def minvariance(weights, covariance_matrix):
    return np.dot(weights, np.dot(covariance_matrix, weights.T))

from scipy.optimize import minimize

def minimization(mu, covariance_matrix):
    initialweights=np.ones(len(mu))/len(mu)
    constraints=({'type': 'eq', 'fun': constraintweights})
    result=minimize(minvariance, initialweights, args=(covariance_matrix, ), method='SLSQP', constraints=constraints)
    optimalweights=result.x
    print("Minimum Variance Portfolio")
    print('Optimal Weights:', optimalweights)
    print('Expected Return:', np.dot(optimalweights, mu))
    print('Risk:', result.fun)
    return [optimalweights, np.dot(optimalweights, mu), result.fun]

minriskoptimal=minimization(mu, covariancematrix)

# Negative Sharpe Ratio for Minimization
def neg_sharpe_ratio(weights, expected_return, covariance_matrix, risk_free_rate):
    p_returns, p_risk=portfolio_performance(weights, expected_return, covariance_matrix)
    return -(p_returns-risk_free_rate)/p_risk

# Maximum Sharpe Ratio Portfolio
def max_sharpe_ratio_portfolio(expected_returns, covariance_matrix, risk_free_rate):
    initialweights=np.ones(len(mu))/len(mu)
    num_assets=len(expected_returns)
    constraints=({'type': 'eq', 'fun': constraintweights})
    bounds = tuple((0, 1) for asset in range(num_assets))
    result=minimize(neg_sharpe_ratio, initialweights, args=(expected_returns, covariance_matrix, risk_free_rate), method='SLSQP', bounds=bounds, constraints=constraints)
    return result

max_sharpe_result=max_sharpe_ratio_portfolio(mu, covariancematrix, r)
max_sharpe_return, max_sharpe_risk=portfolio_performance(max_sharpe_result.x, mu, covariancematrix)

print("Maximum Sharpe Ratio Portfolio")
print('Optimal Weights:', max_sharpe_result.x)
print('Expected Return:', max_sharpe_return)
print('Risk:', max_sharpe_risk)

"""6. Calculate the beta for each asset using a market index (e.g., S&P 500) as the benchmark."""

returns=[]
for i in range(len(df)):
    returns.append(df[i]['Rate of Return'])

# Load benchmark dataset
benchmark = pd.read_csv('/content/drive/My Drive/9Sem/20XT96 MS Lab/Benchmark.csv')
benchmark_returns = benchmark['Close'].pct_change().dropna()

# Calculate beta value for each stock
betas=[]
for i in range(len(stocks)):
    covariance=returns[i].cov(benchmark_returns)
    benchmark_variance=benchmark_returns.var()
    beta=covariance/benchmark_variance
    betas.append(beta)
    print(f"Beta for {stocks[i]}: {beta}")

"""9. Calculate the Value at Risk (VaR) for the optimized portfolio. Use both historical simulation and parametric methods."""

def value_at_risk(returns, confidence=0.05):
    var=np.percentile(returns, confidence*100)
    return var

portfolio_returns=mu.dot(max_sharpe_result.x)
VaR_historical=value_at_risk(portfolio_returns)
VaR_parametric=portfolio_returns.mean()-1.65*portfolio_returns.var()

print(f"Historical VaR: {VaR_historical}")
print(f"Parametric VaR: {VaR_parametric}")

"""12. Backtest the performance of the optimized portfolios over the last year of data."""

# Backtest performance by calculating cumulative returns over the last year
backtest_returns=portfolio_returns[-252:].cumsum()
plt.plot(backtest_returns, label='Optimized Portfolio')
plt.title("Backtest Performance (Last Year)")
plt.legend()
plt.show()

"""13. Compare the performance of the Mean-Variance, optimized portfolios against a simple equally-weighted portfolio."""

equal_weights=np.array([1/len(stocks)]*len(stocks))
equal_weighted_returns=mu.dot(equal_weights)

# Plot performance comparison
plt.plot(equal_weighted_returns[-252:].cumsum(), label="Equal Weighted Portfolio")
plt.plot(backtest_returns, label="Optimized Portfolio")
plt.title("Performance Comparison")
plt.legend()
plt.show()