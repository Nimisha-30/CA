# -*- coding: utf-8 -*-
"""PS1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qu0IzmdUTE_kF_4cgJAMtp4fd7E0UWV0
"""

import pandas as pd
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# Read file
filename = 'infofile.xlsx'
df = pd.read_excel(filename, header=None)
df.columns = ['Information']
print(df)

# Split file into documents
info = []
arr = []
for ind in df.index:
    temp = df['Information'][ind]
    if '.I' in temp:
        info.append(arr)
        arr = []
    else:
        arr.append(temp)
print(info)

# Download NLTK data
nltk.download('stopwords')
nltk.download('punkt')

# Remove stop words from a document and tokenize text
stop_words = set(stopwords.words('english'))
punctuations =[',','?','.W']
info1 =[]
for doc in info:
    arr1=[]
    for text in doc:
        word_tokens = word_tokenize(text)
        filtered_sentence = [w for w in word_tokens if  not w.lower() in stop_words]
        filter = [w for w in filtered_sentence if not w in punctuations]
        if filter:
            arr1.append(filter)
        info1.append(arr1)
print(info1)

# Create an inverted index
inverted_index = {}
index = 0
for info in info1:
    for text in info:
        for item in text:
            if item in inverted_index:
                inverted_index[item].append(index)
            else:
                temp=[]
                temp.append(index)
                inverted_index[item] = temp
    index+=1
print(inverted_index)

# New expression
exp = ["(","problems","AND","INFORMATION",")"]
boolean_op = ["AND","OR","NOT"]
precedence = {"AND":2,"OR":1,"NOT":3}
postfix =[]
stack = []

#Convert infix to postfix expression
for token in exp:
  if token =="(":
    stack.append(token)
  elif token in boolean_op:
    while stack and stack[-1] != "(" and precedence[stack[-1]] <= precedence[token]:
      postfix.append(stack.pop())
    stack.append(token)
  elif token == ")":
    while stack and stack[-1] != "(":
      postfix.append(stack.pop())
    stack.pop()
  else:
    postfix.append(token)
while stack:
  postfix.append(stack.pop())
print("The postfix expression is ")
print(postfix)

#Evaluating the postfix expression

#Return the term1 and term2 result
def evaluate_AND(term1,term2):
  term1_docs = inverted_index[term1.lower()]
  term2_docs = inverted_index[term2.lower()]
  result = set(term1_docs) & set(term2_docs)
  return result
#Return the term1 OR term2 result
def evaluate_OR(term1,term2):
  term1_docs = inverted_index[term1]
  term2_docs = inverted_index[term2]
  result = set(term1_docs) | set(term2_docs)
  return result
def evaluate_NOT(term):
  term_docs = inverted_index[term]
  result = set(range(len(info1))) - set(term_docs)
  return result
eval_stack =[]
for token in postfix:
  if token in boolean_op:
    op2 = eval_stack.pop()
    op1 = eval_stack.pop()
    if token == "AND":
      res = evaluate_AND(op1,op2)
    elif token == "OR":
      res = evaluate_OR(op1,op2)
    else:
      res = evaluate_NOT(op2)
    eval_stack.append(res)
  else:
    eval_stack.append(token)
print("The result documents are: ")
print(eval_stack)